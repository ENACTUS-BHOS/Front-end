@inject IHttpClientFactory httpClientFactory

<section class="search-menu">
    <div class="container">
        <div class="action-buttons">
            <button @onclick="OnSortClick" type="button" class="btn-order">
                <svg width="19" height="18" viewBox="0 0 19 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9.5 1.5L2 5.25L9.5 9L17 5.25L9.5 1.5Z" stroke="#201A1E" stroke-width="1.5"
                        stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M2 12.75L9.5 16.5L17 12.75" stroke="#201A1E" stroke-width="1.5" stroke-linecap="round"
                        stroke-linejoin="round" />
                    <path d="M2 9L9.5 12.75L17 9" stroke="#201A1E" stroke-width="1.5" stroke-linecap="round"
                        stroke-linejoin="round" />
                </svg>
                Sırala
            </button>
            <button @onclick="OnFilterClick" type="button" class="btn-filter">
                <svg width="15" height="16" viewBox="0 0 15 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M13.9562 2.48429C14.3684 1.99682 14.0219 1.25 13.3835 1.25H1.61648C0.978057 1.25 0.631556 1.99681 1.0438 2.48429L5.82268 8.13532C5.93718 8.27071 6 8.44229 6 8.61961V12.7865C6 13.0706 6.1605 13.3303 6.41459 13.4573L7.91459 14.2073C8.41327 14.4566 9 14.094 9 13.5365V8.61961C9 8.44229 9.06282 8.27071 9.17732 8.13532L13.9562 2.48429Z"
                        stroke="#201A1E" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                Filtr
            </button>
        </div>
        <div class="search-bar">
            <input @bind-value="@search" type="text" name="" id="search-input"
                placeholder="Artist və ya əl işi axtarın" />
            <button @onclick="UpdateTutorialsData" type="submit" class="btn-search">
                Axtar <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M8.25 14.25C11.5637 14.25 14.25 11.5637 14.25 8.25C14.25 4.93629 11.5637 2.25 8.25 2.25C4.93629 2.25 2.25 4.93629 2.25 8.25C2.25 11.5637 4.93629 14.25 8.25 14.25Z"
                        stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M15.75 15.7498L12.4875 12.4873" stroke="black" stroke-width="1.5" stroke-linecap="round"
                        stroke-linejoin="round" />
                </svg>

            </button>
        </div>
    </div>
    <form class="filters" id="@(IsFilterHidden ? "hidden" : "")">
        <select @onchange="CategoryChanged">
            <option value="">---</option>
            @foreach(var item in categories)
            {
                <option value="@item">@item</option>
            }
        </select>

        <button type="button" @onclick="UpdateTutorialsData" class="btn-search">Axtar</button>
    </form>
    <form class="filters" id="@(IsSortHidden ? "hidden" : "")">
        <button type="button" @onclick="OnAscendingSearchClick" class="sort-button">Artan sira ile Sırala</button>

        <button type="button" @onclick="OnDescendingSearchClick" class="sort-button">Azalan sira ile Sırala</button>
    </form>
</section>

<div class="section">
    @foreach (var tutorial in AllTutorials)
    {
        <iframe width=670 height=380 scrolling="no" src="@tutorial.VideoUrl" title="@tutorial.Title" frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; gyroscope; picture-in-picture; web-share"
            allowfullscreen></iframe>
    }
</div>

<div class="pagination">
    <button @onclick="OnPreviousClicked">&laquo;</button>
    <button>@(page + 1)</button>
    <button @onclick="OnNextClicked">&raquo;</button>
</div>

@code {
    public IEnumerable<Tutorial> AllTutorials { get; set; } = new List<Tutorial>() { };

    public IEnumerable<string> categories { get; set; } = new List<string>() { };

    public int Count { get; set; } = 0;

    public int page = 0;

    public int take = 6;

    public int skip = 0;

    public int index = 0;

    public string? search = null;

    public string? category = null;

    public bool? isSortAscending = null;

    public bool IsFilterHidden = true;

    public bool IsSortHidden = true;

    public bool IsSortAscending = true;

    public bool IsSortDescending = true;

    public string SortMode { get; set; }

    public void CategoryChanged(ChangeEventArgs args)
    {
        category = args.Value.ToString();
    }

    public void OnFilterClick()
    {
        IsFilterHidden = !IsFilterHidden;
    }

    public void OnSortClick()
    {
        IsSortHidden = !IsSortHidden;
    }

    protected override async Task OnInitializedAsync()
    {
        AllTutorials = await GetTutorialsAsync(skip, take, search, category, isSortAscending);

        Count = await GetCountAsync(search, category, isSortAscending);
    
        categories = await GetCategories();
    }

    public async Task UpdateTutorialsData()
    {
        AllTutorials = await GetTutorialsAsync(skip, take, search, category, isSortAscending);

        Count = await GetCountAsync(search, category, isSortAscending);
    }

    public async Task OnNextClicked()
    {
        if (page + 1 == Count / take || Count < take)
        {
            return;
        }

        index = 0;

        ++page;

        skip = page * take;

        AllTutorials = await GetTutorialsAsync(skip, take, search, category, isSortAscending);
    }

    public async Task OnPreviousClicked()
    {
        if (page == 0)
        {
            return;
        }

        index = 0;

        --page;

        skip = page * take;

        AllTutorials = await GetTutorialsAsync(skip, take, search, category, isSortAscending);
    }

    public async Task<IEnumerable<Tutorial>> GetTutorialsAsync(int skip, int take, string? search, string? category, bool?
    isSortAscending)
    {
        var httpClient = httpClientFactory.CreateClient("Miras");

        var response = await
        httpClient.GetAsync($"api/Tutorial/Get?skip={skip}&take={take}&search={search}&category={category}&isSortAscending={isSortAscending}");

        var content = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        var result = JsonConvert.DeserializeObject<List<Tutorial>>(content);

        return result;
    }

    public async Task<int> GetCountAsync(string? search, string? category, bool? isSortAscending)
    {
        var httpClient = httpClientFactory.CreateClient("Miras");

        var countResponse = await
        httpClient.GetAsync($"api/Tutorial/GetTutorialsCount?search={search}&category={category}&isSortAscending={isSortAscending}");

        var countContent = await countResponse.Content.ReadAsStringAsync();

        if (!countResponse.IsSuccessStatusCode)
        {
            throw new ApplicationException(countContent);
        }

        var count = JsonConvert.DeserializeObject<int>(countContent);

        return count;
    }

    public async Task<IEnumerable<string>> GetCategories()
    {
        var httpClient = httpClientFactory.CreateClient("Miras");

        var response = await
        httpClient.GetAsync($"api/Tutorial/GetAllCategories");

        var content = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        var result = JsonConvert.DeserializeObject<List<string>>(content);

        return result;
    }

    public async Task OnAscendingSearchClick()
    {
        isSortAscending = true;

        await UpdateTutorialsData();
    }

    public async Task OnDescendingSearchClick()
    {
        isSortAscending = false;

        await UpdateTutorialsData();
    }
}