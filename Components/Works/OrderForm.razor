@inject IHttpClientFactory httpClientFactory
@inject ILocalStorageService LocalStorageService

<div class="order-container">
    <div class="product-info">
        <div class="product-image">
            <img src="@ImageUrl" alt="selected product" />
        </div>
        <div class="product-details">
            <p class="product-name">@ProductName</p>
            <p class="artist-name">@ArtistName</p>
            <p class="product-price">@Price AZN</p>
        </div>
    </div>
    <div class="title">@Resources.orderForm</div>
    <div class="description">
        @Resources.orderFormDescription
    </div>
    <form action="/order-page">
        <label for="customer-name">@Resources.nameField</label>
        <input @bind-value="@order.FullName" type="text" name="" id="customer-name" placeholder="@Resources.nameFieldPlaceholder" />

        <label for="customer-contact">@Resources.contactField</label>
        <input @bind-value="@order.PhoneNumber" type="text" name="" id="customer-contact" placeholder="+994-000-000-00-00" />

        <label for="customer-email">@Resources.emailField</label>
        <input @bind-value="@order.Email" type="email" name="" id="customer-email" placeholder="@Resources.emailExample" />

        <label for="customer-note">@Resources.notesField</label>
        <input @bind-value="@order.AdditionalInformation" type="text" name="" id="customer-note" placeholder="@Resources.notesFieldPlaceholder" />
        <button @onclick="OrderAsync" type="button" class="order-btn">@Resources.confirm</button>
    </form>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public string? ImageUrl { get; set; }

    [Parameter]
    public string? ProductName { get; set; }

    [Parameter]
    public int? ProductId { get; set; }

    [Parameter]
    public string? ArtistName { get; set; }

    [Parameter]
    public int? Price { get; set; }
    
    public Order order = new ();

    public async Task OrderAsync()
    {
        order.ProductId = ProductId;

        var httpClient = httpClientFactory.CreateClient("Miras");

        var response = await httpClient.PostAsJsonAsync<Order>($"api/Product/Order", order);

        var content = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        await BlazoredModal.CloseAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var currentCulture = await LocalStorageService.GetItemAsync<string>("currentCulture");

        CultureInfo.DefaultThreadCurrentCulture = CultureInfo.GetCultureInfo(currentCulture ?? "az-AZ");

        CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.GetCultureInfo(currentCulture ?? "az-AZ");
    }
}