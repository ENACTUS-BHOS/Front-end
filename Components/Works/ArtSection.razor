@inject IHttpClientFactory httpClientFactory

@using BlazorBootstrap

<style>
	.spinner {
		color: #60480a !important;
	}
</style>

<section class="search-menu">
	<div class="container">
		<div class="action-buttons">
			<button @onclick="OnSortClick" type="button" class="btn-order">
				<svg width="19" height="18" viewBox="0 0 19 18" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M9.5 1.5L2 5.25L9.5 9L17 5.25L9.5 1.5Z" stroke="#201A1E" stroke-width="1.5"
						stroke-linecap="round" stroke-linejoin="round" />
					<path d="M2 12.75L9.5 16.5L17 12.75" stroke="#201A1E" stroke-width="1.5" stroke-linecap="round"
						stroke-linejoin="round" />
					<path d="M2 9L9.5 12.75L17 9" stroke="#201A1E" stroke-width="1.5" stroke-linecap="round"
						stroke-linejoin="round" />
				</svg>
				@Resources.sort
			</button>
			<button @onclick="OnFilterClick" type="button" class="btn-filter">
				<svg width="15" height="16" viewBox="0 0 15 16" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path
						d="M13.9562 2.48429C14.3684 1.99682 14.0219 1.25 13.3835 1.25H1.61648C0.978057 1.25 0.631556 1.99681 1.0438 2.48429L5.82268 8.13532C5.93718 8.27071 6 8.44229 6 8.61961V12.7865C6 13.0706 6.1605 13.3303 6.41459 13.4573L7.91459 14.2073C8.41327 14.4566 9 14.094 9 13.5365V8.61961C9 8.44229 9.06282 8.27071 9.17732 8.13532L13.9562 2.48429Z"
						stroke="#201A1E" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
				</svg>
				@Resources.filter
			</button>
		</div>
		<div class="search-bar">
			<input @bind-value="@search" type="text" name="" id="search-input" placeholder="@Resources.searchPlaceholder" />
			<button @onclick="UpdateProductsData" type="button" class="btn-search">
				@Resources.search <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path
						d="M8.25 14.25C11.5637 14.25 14.25 11.5637 14.25 8.25C14.25 4.93629 11.5637 2.25 8.25 2.25C4.93629 2.25 2.25 4.93629 2.25 8.25C2.25 11.5637 4.93629 14.25 8.25 14.25Z"
						stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
					<path d="M15.75 15.7498L12.4875 12.4873" stroke="black" stroke-width="1.5" stroke-linecap="round"
						stroke-linejoin="round" />
				</svg>

			</button>
		</div>
	</div>
	<form class="filters" id="@(IsFilterHidden ? "hidden" : "")">
		<input @bind-value="@minimumPrice" type="number" required id="search-input" placeholder=@Resources.minimumPrice
			min="0">

		<input @bind-value="@maximumPrice" type="number" required id="search-input" placeholder=@Resources.maximumPrice
			min="0">

		<button type="button" @onclick="UpdateProductsData" class="btn-search">@Resources.search</button>
	</form>
	<form class="filters" id="@(IsSortHidden ? "hidden" : "")">
		<button type="button" @onclick="OnAscendingSearchClick" class="sort-button">@Resources.ascendingPriceSort</button>

		<button type="button" @onclick="OnDescendingSearchClick" class="sort-button">@Resources.descendingPriceSort</button>
	</form>
</section>

<div class="content-container">
	@if (isLoading)
	{
		<div class="d-flex justify-content-center">
			<Spinner Type="SpinnerType.Border" Class="m-5 spinner" />
		</div>
	}
	else
	{
		@if (@CultureInfo.CurrentCulture.Name == "az-AZ")
		{
			@foreach (var artist in artists)
			{
				<section class="artist-overview">
					<div class="artist-details">
						<div class="artist-name">@artist.Name</div>
						<div class="artist-role">@artist.Major</div>
					</div>

					<div class="artist-bio">
						@artist.Description
					</div>

					<div class="link">
						<a href="/Works/@artist.Id" class="view-art-link">Bütün işlərə bax
							<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M9.40436 2.6543L15.75 8.99995L9.40436 15.3456" stroke="#201A1E" stroke-width="1.7"
								      stroke-linecap="round" stroke-linejoin="round" />
								<path d="M15.7499 9L2.25 9" stroke="#201A1E" stroke-width="1.7" stroke-linecap="round"
								      stroke-linejoin="round" />
							</svg>
						</a>
					</div>
				</section>

				<!-- ----------------------------------------------- -->

				<section class="art-gallery">
					<div class="art-cards">
						@foreach (var product in artist.Products)
						{
							<div class="card">
								<img src="@product.ImageUrl" alt="art-image" />
								<div class="card-description">
									<div class="card-name">@product.Name</div>
									<div class="card-price">
										<p>@product.Price AZN</p>
										<a @onclick="@(() => OrderProduct(product, artist))" class="card-get">Əldə et</a>
									</div>
								</div>
							</div>
						}
					</div>
				</section>
			}
		}
		else if (@CultureInfo.CurrentCulture.Name == "en-EN")
		{
			@foreach (var artist in artists)
			{
				<section class="artist-overview">
					<div class="artist-details">
						<div class="artist-name">@artist.NameEn</div>
						<div class="artist-role">@artist.MajorEn</div>
					</div>

					<div class="artist-bio">
						@artist.DescriptionEn
					</div>

					<div class="link">
						<a href="/Works/@artist.Id" class="view-art-link">See all works
							<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M9.40436 2.6543L15.75 8.99995L9.40436 15.3456" stroke="#201A1E" stroke-width="1.7"
								      stroke-linecap="round" stroke-linejoin="round" />
								<path d="M15.7499 9L2.25 9" stroke="#201A1E" stroke-width="1.7" stroke-linecap="round"
								      stroke-linejoin="round" />
							</svg>
						</a>
					</div>
				</section>

				<!-- ----------------------------------------------- -->

				<section class="art-gallery">
					<div class="art-cards">
						@foreach (var product in artist.Products)
						{
							<div class="card">
								<img src="@product.ImageUrl" alt="art-image" />
								<div class="card-description">
									<div class="card-name">@product.NameEn</div>
									<div class="card-price">
										<p>@product.Price AZN</p>
										<a @onclick="@(() => OrderProduct(product, artist))" class="card-get">Order</a>
									</div>
								</div>
							</div>
						}
					</div>
				</section>
			}
		}
	}
</div>

<div class="pagination">
	<button @onclick="OnPreviousClicked">&laquo;</button>
	<button>@(page + 1)</button>
	<button @onclick="OnNextClicked">&raquo;</button>
</div>

@code {
	private IEnumerable<Artist> artists { get; set; } = new List<Artist>() { };

	private int Count { get; set; } = 0;

	private string? search = null;

	private int? minimumPrice = null;

	private int? maximumPrice = null;

	private bool? isSortAscending = null;

	private int page = 0;

	private int take = 3;

	private int skip = 0;

	private int skipProducts = 0;

	private int takeProducts = 9;

	private bool isLoading = true;

	private async Task UpdateProductsData()
	{
		isLoading = true;

		artists = new List<Artist>();

		var result = await GetArtistsAndCountAsync(skip, take, takeProducts, search, minimumPrice, maximumPrice, isSortAscending);

		artists = result.Artists;

		Count = result.Count;
		
		isLoading = false;
	}

	protected override async Task OnInitializedAsync()
	{
		await UpdateProductsData();
	}
	
	private async Task<ProductsCount> GetArtistsAndCountAsync(int skip, int take, int takeProducts, string? search, int? minimumPrice, int?
	maximumPrice, bool?
	isSortAscending)
	{
		var httpClient = httpClientFactory.CreateClient("Miras");

		var response = await
		httpClient.GetAsync($"api/Artists/Get?skip={skip}&take={take}&takeProducts={takeProducts}&search={search}&minimumPrice={minimumPrice}&maximumPrice={maximumPrice}&isSortAscending={isSortAscending}");

		var content = await response.Content.ReadAsStringAsync();

		if (!response.IsSuccessStatusCode)
		{
			throw new ApplicationException(content);
		}

		var result = JsonConvert.DeserializeObject<ProductsCount>(content);

		return result;
	}

	private bool IsFilterHidden = true;
	private bool IsSortHidden = true;

	private void OnFilterClick()
	{
		IsFilterHidden = !IsFilterHidden;
	}

	private void OnSortClick()
	{
		IsSortHidden = !IsSortHidden;
	}

	private async Task OnNextClicked()
	{
		var times = Count / take;

		if (times * take < Count)
		{
			times += 1;
		}

		if (page + 1 == times)
		{
			return;
		}

		++page;

		skip = page * take;

		await UpdateProductsData();
	}

	private async Task OnPreviousClicked()
	{
		if (page == 0)
		{
			return;
		}

		--page;

		skip = page * take;

		await UpdateProductsData();
	}

	private async Task OnAscendingSearchClick()
	{
		isSortAscending = true;

		await UpdateProductsData();
	}

	private async Task OnDescendingSearchClick()
	{
		isSortAscending = false;

		await UpdateProductsData();
	}

	[CascadingParameter]
	private IModalService Modal { get; set; }

	private void OrderProduct(Product product, Artist artist)
	{
		var productName = CultureInfo.CurrentCulture.Name == "az-AZ" ? product.Name : product.NameEn;
		
		var artistName = CultureInfo.CurrentCulture.Name == "az-AZ" ? artist.Name : artist.NameEn;
		
		var parameters = new ModalParameters()
		.Add("ImageUrl", product.ImageUrl)
		.Add("ProductName", productName)
		.Add("ProductId", product.Id)
		.Add("ArtistName", artistName)
		.Add("Price", product.Price);

		Modal.Show<OrderForm>("Passing Data", parameters);
	}
}