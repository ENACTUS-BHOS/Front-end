@inject IHttpClientFactory httpClientFactory

<section class="search-menu">
    <div class="container">
        <div class="search-bar">
            <input @bind-value="@search" type="text" name="" id="search-input"
                   placeholder="Sərgi axtarın"/>
            <button @onclick="UpdateTutorialsData" type="submit" class="btn-search">
                @Resources.search
                <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M8.25 14.25C11.5637 14.25 14.25 11.5637 14.25 8.25C14.25 4.93629 11.5637 2.25 8.25 2.25C4.93629 2.25 2.25 4.93629 2.25 8.25C2.25 11.5637 4.93629 14.25 8.25 14.25Z"
                          stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M15.75 15.7498L12.4875 12.4873" stroke="black" stroke-width="1.5" stroke-linecap="round"
                          stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
    </div>
</section>

<div class="section">
    @foreach (var exhibition in AllExhibitions)
    {
        <a class="exhibition" href="/Exhibitions/@exhibition.Id">
            <img src=@exhibition.ImageUrl/>

            @if (CultureInfo.CurrentCulture.Name == "az-AZ")
            {
                <p>@exhibition.Name</p>
            }
            else if (CultureInfo.CurrentCulture.Name == "en-EN")
            {
                <p>@exhibition.NameEn</p>
            }
        </a>
    }
</div>

<div class="pagination">
    <button @onclick="OnPreviousClicked">&laquo;</button>
    <button>@(page + 1)</button>
    <button @onclick="OnNextClicked">&raquo;</button>
</div>

@code {
    private IEnumerable<Exhibition> AllExhibitions { get; set; } = new List<Exhibition>() { };

    private int Count { get; set; } = 0;

    private int page = 0;

    private int take = 6;

    private int skip = 0;

    private string? search = null;

    protected override async Task OnInitializedAsync()
    {
        AllExhibitions = await GetExhibitionsAsync(skip, take, search);

        Count = await GetCountAsync(search);
    }

    private async Task UpdateTutorialsData()
    {
        AllExhibitions = await GetExhibitionsAsync(skip, take, search);

        Count = await GetCountAsync(search);
    }

    private async Task OnNextClicked()
    {
        var times = Count / take;

        if (times * take < Count)
        {
            times += 1;
        }

        if (page + 1 == times)
        {
            return;
        }

        ++page;

        skip = page * take;

        AllExhibitions = await GetExhibitionsAsync(skip, take, search);
    }

    private async Task OnPreviousClicked()
    {
        if (page == 0)
        {
            return;
        }

        --page;

        skip = page * take;

        AllExhibitions = await GetExhibitionsAsync(skip, take, search);
    }

    private async Task<IEnumerable<Exhibition>> GetExhibitionsAsync(int skip, int take, string? search)
    {
        var httpClient = httpClientFactory.CreateClient("Miras");

        var response = await
            httpClient.GetAsync($"api/Exhibition/Get?skip={skip}&take={take}&search={search}");

        var content = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        var result = JsonConvert.DeserializeObject<List<Exhibition>>(content);

        return result;
    }

    private async Task<int> GetCountAsync(string? search)
    {
        var httpClient = httpClientFactory.CreateClient("Miras");

        var countResponse = await
            httpClient.GetAsync($"api/Exhibition/GetCount?search={search}");

        var countContent = await countResponse.Content.ReadAsStringAsync();

        if (!countResponse.IsSuccessStatusCode)
        {
            throw new ApplicationException(countContent);
        }

        var count = JsonConvert.DeserializeObject<int>(countContent);

        return count;
    }
}